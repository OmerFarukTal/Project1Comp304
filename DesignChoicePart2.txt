ACKNOWLEDGEMENT:

The parser that is given to us for the assignment is poorly designed for IO direction (at least from the perspective of the student)
For pipe operations it seems good 

Reason: (IO Redirection)
1-) For IO redirection the flag are not informative, flag do not give information about index and count of the IO redirection
2-) 

Solution:
1a-) A redirection list can be defined for each ">", "<" ">>"
     For ex:

     ls -l > a.txt < b.txt
     
     write index = [2]
     read index = [4]
     args:
            0: -l
            1: a.txt
            2: b.txt


1b-) IO redirection operation can be append to args list (It is burden for the programmer :()
    For ex:
    
    ls -l > a.txt < b.txt
    args: 
            0: -l
            1: >
            2: a.txt
            3: <
            4: b.txt


1c-) IO redirection lists can be defined for each ">", "<", ">>" (List will hold the indices of the files ) 
    For ex:
    
    ls -l > a.txt < b.txt
    
    write index = [1]
    read index = [2]
    args:
            0: -l
            1: a.txt
            2: b.txt

     With (1c) it is easier to implement I guess, split command with indexes to subcommand then pipe them

1d-) A relation similar to "pipe" can be used 
     hard to implement also is it necessary? Can 1c be used instead of this?

    
    cat a.txt > b.txt

    "cat a.txt" and "b.txt" is splitted, 2 command is created for each and the IO relation is showed
    
    "cat a.txt" 
    to write: "b.txt" 

    Give programmer to better representation to work on.
    






Reason: (Pipe)
1-) I did not use it but I like the format in the print_command
    For ex:
    
    ls -l | sort

    "ls -l" and "sort" is splitted, 2 command is created for each and the pipe relation is showed

    Give programmer to better representation to work on.
    


